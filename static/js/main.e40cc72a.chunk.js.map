{"version":3,"sources":["Cell.tsx","Cells.tsx","Game.tsx","App.tsx","index.tsx"],"names":["Cell","className","this","props","value","React","Component","Cells","cellGroups","map","cells","groupIndex","key","cell","cellIndex","groups","forEach","index","Math","floor","push","Game","score","over","won","callbacks","init","rowIndex","columnIndex","rowValue","colValue","addScore","columnValue","step","up","down","left","right","dispatch","generateBlock","checkOver","event","callback","Array","fill","bind","hasEmptyCell","i","Steps","length","slice","filter","randomIndex","random","App","game","start","state","addition","handleKeydown","restart","document","addEventListener","addCallback","setState","removeEventListener","removeCallback","onClick","preventDefault","respond","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","code","refreshGameState","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e40cc72a.chunk.js","sourcesContent":["import React from 'react'\nimport './Cell.css'\n\ninterface CellProps {\n  value: number\n}\n\ninterface CellState {}\n\nexport default class Cell extends React.Component<CellProps, CellState> {\n  render () {\n    return (\n      <div className={`cell cell-${this.props.value}`}>\n        {this.props.value}\n      </div>\n    )\n  }\n}","import React from 'react'\nimport Cell from './Cell'\nimport './Cells.css'\n\ninterface CellsProps {\n  cells: number[]\n}\n\ninterface CellsState {}\n\nexport default class Cells extends React.Component<CellsProps, CellsState> {\n  render () {\n    return (\n      <div className=\"cells\">\n        {\n          this.cellGroups().map((cells: number[], groupIndex: number) => {\n            return (\n              <div key={groupIndex} className=\"cells-row\">\n                {\n                  cells.map((cell: number, cellIndex: number) => {\n                    return <Cell key={groupIndex * 4 + cellIndex} value={cell} />\n                  })\n                }\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n\n  cellGroups () {\n    let groups : any[] = []\n\n    this.props.cells.forEach((value: number, index: number) => {\n      let groupIndex : number = Math.floor(index / 4)\n      groups[groupIndex] = groups[groupIndex] || []\n      groups[groupIndex].push(value)\n    })\n\n    return groups\n  }\n}","class Game {\n  static Steps : string[] = ['up', 'down', 'left', 'right']\n\n  cells: number[]\n\n  score: number\n\n  over: boolean\n\n  won: boolean\n\n  private callbacks: any\n\n  constructor () {\n    this.cells = []\n    this.score = 0\n    this.over  = false\n    this.won   = false\n    this.callbacks = {}\n  }\n\n  start () : void {\n    this.init()\n  }\n\n  restart () : void {\n    this.init()\n  }\n\n  up () : void {\n    let score = 0\n\n    for (let rowIndex = 12; rowIndex < 16; rowIndex++) {\n      let index = rowIndex\n\n      for (let columnIndex = rowIndex - 4; columnIndex >= rowIndex - 12; columnIndex -= 4) {\n        let rowValue = this.cells[index]\n        let colValue = this.cells[columnIndex]\n\n        if (colValue === 0) {\n          this.cells[index] = 0\n          this.cells[columnIndex] = rowValue\n        } else if (rowValue === colValue) {\n          this.cells[index] = 0\n          this.cells[columnIndex] = rowValue + colValue\n          score += rowValue\n          if (this.cells[columnIndex] === 2048) {\n            this.won = true\n            this.callbacks['won'] && this.callbacks['won']()\n          }\n\n          if (columnIndex > rowIndex - 12 && this.cells[columnIndex - 4] === this.cells[columnIndex]) break\n        }\n\n        index = columnIndex\n      }\n    }\n\n    if (score !== 0) this.addScore(score)\n  }\n\n  down () : void {\n    let score = 0\n\n    for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n      let index = rowIndex\n\n      for (let columnIndex = rowIndex + 4; columnIndex <= rowIndex + 12; columnIndex += 4) {\n        let rowValue = this.cells[index]\n        let colValue = this.cells[columnIndex]\n\n        if (colValue === 0) {\n          this.cells[index] = 0\n          this.cells[columnIndex] = rowValue\n        } else if (rowValue === colValue) {\n          this.cells[index] = 0\n          this.cells[columnIndex] = rowValue + colValue\n          score += rowValue\n\n          if (this.cells[columnIndex] === 2048) {\n            this.won = true\n            this.callbacks['won'] && this.callbacks['won']()\n          }\n\n          if (columnIndex < rowIndex + 12 && this.cells[columnIndex + 4] === this.cells[columnIndex]) break\n        }\n\n        index = columnIndex\n      }\n    }\n\n    if (score !== 0) this.addScore(score)\n  }\n\n  left () : void {\n    let score = 0\n\n    for (let columnIndex = 3; columnIndex <= 15; columnIndex += 4) {\n      let index = columnIndex\n\n      for (let rowIndex = columnIndex - 1; rowIndex >= columnIndex - 3; rowIndex--) {\n        let columnValue = this.cells[index]\n        let rowValue = this.cells[rowIndex]\n\n        if (rowValue === 0) {\n          this.cells[index] = 0\n          this.cells[rowIndex] = columnValue\n        } else if (columnValue === rowValue) {\n          this.cells[index] = 0\n          this.cells[rowIndex] = columnValue + rowValue\n          score += columnValue\n\n          if (this.cells[rowIndex] === 2048) {\n            this.won = true\n            this.callbacks['won'] && this.callbacks['won']()\n          }\n\n          if (rowIndex < columnIndex - 3 && this.cells[rowIndex - 1] === this.cells[rowIndex]) break\n        }\n\n        index = rowIndex\n      }\n    }\n\n    if (score !== 0) this.addScore(score)\n  }\n\n  right () : void {\n    let score = 0\n\n    for (let columnIndex = 0; columnIndex <= 12; columnIndex += 4) {\n      let index = columnIndex\n\n      for (let rowIndex = columnIndex + 1; rowIndex <= columnIndex + 3; rowIndex++) {\n        let columnValue = this.cells[index]\n        let rowValue = this.cells[rowIndex]\n\n        if (rowValue === 0) {\n          this.cells[index] = 0\n          this.cells[rowIndex] = columnValue\n        } else if (columnValue === rowValue) {\n          this.cells[index] = 0\n          this.cells[rowIndex] = columnValue + rowValue\n          score += columnValue\n\n          if (this.cells[rowIndex] === 2048) {\n            this.won = true\n            this.callbacks['won'] && this.callbacks['won']()\n          }\n\n          if (rowIndex < columnIndex + 3 && this.cells[rowIndex + 1] === this.cells[rowIndex]) break\n        }\n\n        index = rowIndex\n      }\n    }\n\n    if (score !== 0) this.addScore(score)\n  }\n\n  dispatch (step: string) : boolean {\n    switch (step) {\n      case \"up\":\n        this.up()\n        return true\n      case \"down\":\n        this.down()\n        return true\n      case \"left\":\n        this.left()\n        return true\n      case \"right\":\n        this.right()\n        return true\n      default:\n        return false\n    }\n  }\n\n  respond (step: string) : boolean {\n    if (!this.over && !this.won && this.dispatch(step)) {\n      this.generateBlock()\n      this.checkOver()\n      return true\n    }\n\n    return false\n  }\n\n  addCallback (event: string, callback: any) : void {\n    this.callbacks[event] = callback\n  }\n\n  removeCallback (event: string) : void {\n    delete this.callbacks[event]\n  }\n\n  private init () : void {\n    this.cells = Array(16).fill(0)\n    Array(2).fill(null).forEach(this.generateBlock.bind(this))\n    this.score = 0\n    this.won = false\n    this.over = false\n  }\n\n  private checkOver () : boolean {\n    if (this.hasEmptyCell()) return false\n\n    for (let i = 0; i < Game.Steps.length; i++) {\n      const cells = this.cells.slice()\n\n      this.dispatch(Game.Steps[i])\n\n      if (this.hasEmptyCell()) {\n        this.cells = cells\n        return false\n      }\n\n      this.cells = cells\n    }\n\n    this.over = true\n    this.callbacks['over'] && this.callbacks['over']()\n    return true\n  }\n\n  private addScore (score: number) {\n    this.score = this.score + score\n\n    this.callbacks['addScore'] && this.callbacks['addScore'](score)\n  }\n\n  private hasEmptyCell (): boolean {\n    return this.cells.filter(cell => cell === 0).length !== 0\n  }\n\n  private generateBlock (): void {\n    while (this.hasEmptyCell()) {\n      const randomIndex = Math.floor(Math.random() * 16)\n\n      if (this.cells[randomIndex] === 0) {\n        if (Math.random() < 0.5) {\n          this.cells[randomIndex] = 2\n        } else {\n          this.cells[randomIndex] = 4\n        }\n        break\n      }\n    }\n  }\n}\n\nexport default new Game()","import React from 'react'\nimport Cells from './Cells'\nimport game from './Game'\nimport './App.css'\n\ninterface AppProps {}\n\ninterface AppState {\n  score: number,\n  addition: number,\n  cells: number[],\n  over: boolean,\n  won: boolean\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  constructor (props: any) {\n    super(props)\n\n    game.start()\n\n    this.state = {\n      score: 0,\n      cells: game.cells,\n      over: false,\n      won: false,\n      addition: 0\n    }\n\n    this.handleKeydown = this.handleKeydown.bind(this)\n    this.restart = this.restart.bind(this)\n  }\n\n  componentDidMount () {\n    document.addEventListener('keydown', this.handleKeydown)\n\n    game.addCallback('over', () => {\n      this.setState({ over: true })\n    })\n\n    game.addCallback('won', () => {\n      this.setState({ won: true })\n    })\n\n    game.addCallback('addScore', (score: number) => {\n      this.setState({ addition:  score })\n    })\n  }\n\n  componentWillUnmount () {\n    document.removeEventListener('keydown', this.handleKeydown)\n\n    game.removeCallback('over')\n    game.removeCallback('won')\n    game.removeCallback('addScore')\n  }\n\n  render () {\n    return (\n      <div className=\"app\">\n        <div className=\"game-header\">\n          <h1 className=\"title\">\n            2048\n          </h1>\n          <div className=\"score-container\">\n            {this.state.score}\n\n            {\n              this.state.addition !== 0 && <div className=\"score-addition\">\n                +{this.state.addition}\n              </div>\n            }\n          </div>\n        </div>\n\n        <div className=\"game-intro\">\n          <button className=\"restart-button\" onClick={this.restart}>New Game</button>\n          <h2 className=\"subtitle\">Play 2048 Game</h2>\n          Join the numbers and get to the <b>2048 tile!</b>\n        </div>\n\n        <div className=\"game-container\">\n          {\n            (this.state.won || this.state.over) &&\n              <div className={`game-message game-${(this.state.won && 'won') || (this.state.over && 'over')}`}>\n                <p>\n                  {this.state.won ? 'You win!' : 'Game over!'}\n                </p>\n\n                <div className='actions'>\n                  <button className='retry-button' onClick={this.restart}>Try again</button>\n                </div>\n              </div>\n          }\n          <Cells cells={this.state.cells} />\n        </div>\n\n        <p className=\"game-explanation\">\n          <b className=\"important\">How to play: </b>\n          Use your <b>arrow keys</b> to move the tiles. When two tiles with the same number touch, they <b>merge into one!</b>\n        </p>\n      </div>\n    )\n  }\n\n  restart (event: any) {\n    event.preventDefault()\n    game.restart()\n    this.setState({\n      cells: game.cells,\n      addition: 0,\n      score: 0,\n      over: false,\n      won: false\n    })\n  }\n\n  private handleKeydown (event: any) {\n    const keyMap : any = {\n      ArrowUp: 'up',\n      ArrowDown: 'down',\n      ArrowLeft: 'left',\n      ArrowRight: 'right'\n    }\n\n    if (game.respond(keyMap[event.code])) {\n      this.refreshGameState()\n    }\n  }\n\n  private refreshGameState () : void {\n    this.setState({\n      cells: game.cells,\n      score: game.score,\n      over: game.over,\n      won: game.won\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}